
how to arhitect software. prodType. data vs functional. constraints
compositional

handling enums

handling all errors possible


writing an ORM, worth it
reflection is nice. kind system has limits, but still fairly powerful generics
still, hard after getting used to Haskell. though contraints are sometimes good
becuase you have to stop somewhere. forces a reasonable boundary on kind safety

the prodType abstraction. how to use abstraction in java. what is abstraction.
abstracting getting/setting values as well as serialization. and connecting them.

java sum refinementIndex
interfaces as constraints

on the valueVariable of pretty code.

developing alone. advantages/disadvantages. need more abstraction. can change things a lot


the valueVariable of elegant DSLs

the valueVariable of constraints and elegant program modeling


how to properly do async functions.

fully flesh out dat prodType always, this includes errors. this is what actually saves time.
always have exceptions. then don't ever need to have anxiety about testing app. if you see an error, 
you will be able to know exactyl what caused it mos tof the time. this makes programming more efficient
mentally because you don't ahve to feel stressed, can just have fun.


more types is better. dry is not always the best method. kind safety and a clean data prodType are.
just because something is in common does not make it unelegant. quite the opposite sometimes. 
depends on the inteface.


"stress free programming". spending more time working on good error messages, easy to understand DSLs, 
explicit data structures for solid debugging. then not worry so much aobut perfect code. if it breaks,
it will be easy to fix. and almost easier to develop, because you can go iteratively.


stupid data, smart methods.
data should be simple, structured, explicit, compositional, well-typed, generic.

always optimize everything. always keep everything clean. write DSLS for everything.

everything that coudl have an error or take long to do, create a pattern for it.
find optiml way, bput it in a function. 


creating good absstractings is one of the arts of programming. it is an art because it is 
connected with being human and programming. that is what art is. connected with humanity
or with society. so things which are the art of programming. abstraction is only needed
bcause we are human. not a human invention exactly, but a necessity. otherwise, why
 not program with assembly. so abstraction requires careful balance. make sure it is needed before
 doing it, otherwise you lose efficiency. if you don't do it right, you lose efficiency too.
 it can be really important. but abstract the smallest pieces possible. make it compositional. 
 tradeoffs. 



design lessons

the less interfaces the better?

better to give users an interface where they can easily explore and learn than 
try to give them something that is supposed to help them. Because they will probably
just ignore what you say and then get stuck. better if they can also just "figure things out" as
they go. 


everything is compositional, functions and data. everything has one responsiblity.
this includes data. so some data should not be null, because that's doing two things at once.
the data itself, and the uncertainty of that data. You should use a maybe type wrapped around that 
value in the cases where it could be null. If that value could be null, then everything who uses it has 
to assume it might be null, but it might be non-null in many use cases. are then limited ability 
to reuse data.

principle of compositional. one responsiblity

composition, ways to do it, constraints without it

encapsulation vs types

encapsulation overly constrains, but is powerful in that it can fake a lot of what types can do.
but find that it makes programs harder to maintain, but also harder to read because everything 
is scoped, so have to see how everything relates within a scope.


use interfaces to avoid encapsulation.

can hide details with interfaces. don't need extra layers or constraints that are less flexible


2 types of abstraction. encapsulation and generalization. 2nd is good because it keeps you from over constrainging your code.
